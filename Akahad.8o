############################################
############################################

############################################
############################################
#         #        AKAHAD       #          #
############################################
############################################

############################################
############################################



:alias akahad_draw_x vD
:alias akahad_draw_y vE

:alias akahad_state vC
:alias akahad_frame vB
:alias akahad_draw_off vA

:alias akahad_boost v5

:alias akahad_height v9
:alias floor_draw_height v8

:alias current_level_tile v7
:alias current_remaining v6

# We only need these when we step on a tile now:
# Well! Aren't we running out of registers
#:alias level_progress_hi v4

:alias level_draw_speed vB
:alias level_draw_h_steppy vA
:alias mystery_level_var vC



:alias special_game_register vD


#:alias orbs_gotten v5
#:alias orbs_needed v6


:const AKA_RUN  0x02
:const AKA_JUMP 0x04
:const AKA_BALL 0x06
:const AKA_SLAM 0x08
:const AKA_NO_INPUT 0x0A
:const AKA_DEAD 0x0C
 


: main
  
  plane 1
  v8 := 0

  loop
    i := long fivewide_akahad_numbers
    i += v8
    i += v8
    load v7

    i := 0x00
    i += v8
    i += v8
    save v7


    v8 += 4
    if v8 != 32 then
  again


  # clear out map data:
  v8 := 32

  i := long restore_scratch
  load v7

  i := long level_scratch_data
  loop
    save v7


    v8 -= 1
    if v8 != 0 then
  again

  i := long 0xF000
  load vF

  lores

  i := long levels_complete
  v0 := 0
  save v0 - v0


  v2 := 0
  v3 := 32

  i := long title
  quick_title

  v0 := key

  v4 := 0
  loop
    clear
    quick_title

    vF := 2
    if v4 == 3 then vF := 4
    f_delay
    v4 += 1
    if v4 != 12 then
  again

  v0 := key

  hires

  v0 := 1
  v1 := 58
  i := long hud_boost
  ez_text

  v0 := 1
  v1 := 1
  i := long hud_orbs
  ez_text

  v0 := 81
  v1 := 1
  i := long hud_need
  ez_text

  i := long boost_gauge_start
  v0 := 31
  v1 := 58
  sprite v0 v1 5

  # There's 0 boost guage
  i := boost_guage_last
  v0 := 0
  save v0

  v0 := 0
  v1 := 0

  i := orb_data
  save v1

  draw_orbs_gotten

  i := orb_data
  load v1

  draw_orbs_needed

  akahad_height := 0
  akahad_height -= 0x30
  floor_draw_height := 0x00

  akahad_boost := 0

  i := level_draw_stash
  save current_remaining - mystery_level_var


  :calc akahad_x_position_global { 21 }

  akahad_draw_x := akahad_x_position_global
  akahad_draw_y := 32

  akahad_frame := 0

  akahad_state := AKA_RUN

  i := akahad_stash
  save akahad_draw_off - akahad_draw_y


  i := timer_tron
  v0 := 0
  v1 := 30
  save v1

  plane 2
  draw_timer
  plane 1

  i := is_game_over
  v0 := 5
  v1 := 0
  save v1

  vF := 1
  delay := vF

  loop



    i := akahad_stash
    load akahad_draw_off - akahad_draw_y

    i := animation_steppo
    load v4 - v4
    v4 += 1
    if v4 == 4 then v4 := 0
    save v4 - v4

    akahad_draw_y := 32

    i := is_game_over
    load v6 - v6

    v0 := akahad_state
    jump0 akahad_state_manage
    : true_main_back_from_manage

    v0 := akahad_state
    jump0 akahad_state_service
    : true_main_back_from_service

    i := long akahad_running
    if akahad_state == AKA_BALL then i := long akahad_ball
    if akahad_state == AKA_DEAD then i := long akahad_gameover_head

    i += akahad_draw_off
    i += akahad_draw_off
    sprite akahad_draw_x akahad_draw_y 0

    #v0 := OCTO_KEY_Z if v0 key then yo_add_some_droped_orbs
      #v0 := 1
      #mod_boost_guage
    #end

    #v0 := OCTO_KEY_Z if v0 key begin
      #v0 := 0
      #mod_boost_guage
    #end


    draw_stupid_fireball_of_why_am_I_doing_this_With_less_than_2_hours

    #do_delayvF := 1
    do_delay

    vF := 1
    delay := vF

    draw_stupid_fireball_of_why_am_I_doing_this_With_less_than_2_hours

    i := long akahad_running
    if akahad_state == AKA_BALL then i := long akahad_ball
    if akahad_state == AKA_DEAD then i := long akahad_gameover_head

    i += akahad_draw_off
    i += akahad_draw_off
    sprite akahad_draw_x akahad_draw_y 0

    i := akahad_stash
    save akahad_draw_off - akahad_draw_y

    i := is_game_over
    load special_game_register - special_game_register

    # high registers are now available:

    objects_undraw

#:alias level_draw_speed vB
#:alias level_draw_h_steppy vA
#:alias mystery_level_var vC

#:alias akahad_height v9
#:alias floor_draw_height v8

#:alias current_level_tile v7
#:alias current_remaining v6

    # Load in 6 registers:
    i := level_draw_stash
    load current_remaining - mystery_level_var

    if level_draw_speed == 0 then level_draw_speed := 2

    level_draw_h_steppy -= level_draw_speed
    # We now only need to draw the 'next' tile if our speed has caused us to step over the edge:
    if vF == 0 begin

      # We have walked across a floor boorder
      level_draw_speed := 2

      if special_game_register != 0 then jump skip_ring_boost

      v0 := OCTO_KEY_A if v0 key begin
        # We want to try and slow down time
        if akahad_boost != 0 then jump do_slowdown

        # if our boost var is empty, can we get any by decrementing the boost bar?
        v0 := 0
        mod_boost_guage
        if v3 == 0 then jump no_boost_how_sad

        :calc boost_amount { -32 }
        :calc boost_cap { 256 + boost_amount }
        akahad_boost := boost_cap
        : do_slowdown

        v0 := boost_amount
        akahad_boost += v0
        if vF == 0 then akahad_boost := 0

        level_draw_speed >>= level_draw_speed
        jump skip_ring_boost
      end

      v0 := OCTO_KEY_D if v0 key begin
        # We want to boost

        # We want to try and slow down time
        if akahad_boost != 0 then jump do_speedup

        # if our boost var is empty, can we get any by decrementing the boost bar?
        v0 := 0
        mod_boost_guage
        if v3 == 0 then jump no_boost_how_sad

        :calc boost_amount { -8 }
        :calc boost_cap { 256 + boost_amount }
        akahad_boost := boost_cap
        : do_speedup

        v0 := boost_amount
        akahad_boost += v0
        if vF == 0 then akahad_boost := 0

        level_draw_speed <<= level_draw_speed
      end

      : no_boost_how_sad

      i := boost_from_rings
      load v0 - v1
      if v0 != 0 begin
        level_draw_speed <<= level_draw_speed
        v1 += 1
        if v1 == 64 begin
          v1 := 0
          v0 += -1
        end
        save v0 - v1
      end

      : skip_ring_boost

      if special_game_register != 0 then level_draw_speed := 2

      #v0 := OCTO_KEY_1 if v0 key then level_draw_speed := 1
      #v0 := OCTO_KEY_2 if v0 key then level_draw_speed := 2
      #v0 := OCTO_KEY_3 if v0 key then level_draw_speed := 4
      #v0 := OCTO_KEY_4 if v0 key then level_draw_speed := 8

      # We need to step on our scratch buffer, so that the tiles shift across by 1:
      bad_scratch

      # We need to reset steppy:
      level_draw_h_steppy := 7

      # We check how many tiles we have left to draw, and if we've run out of these ones, we select a new one:
      # If we need to select a new tile:
      if current_remaining == 0 then select_new_map_tile
      current_remaining += -1

      if special_game_register != 0 begin
        
        if current_level_tile == 0 then jump yes_its_simple
        if current_level_tile < 10 then current_level_tile -= 1
        if current_level_tile > -10 then current_level_tile += 1
        
      end

      # We no longer what to do the above ^^^^

      jump yes_its_simple

    end




    # We need to quickly apply our floor camera height adjustment
    # Let's jump0 based on the speed:
    if level_draw_speed == 8 begin
      # We also need to 'apply' the height change of this floor tile to the akahad

      : yes_its_simple
      i := long level_scratch_data

      :calc akahad_level_index { 3 * 8 + 0 }
      v0 := akahad_level_index

      # Load up the jump table version of the tile copy we're on:
      i += v0

      load v0

      v0 -= 0x30

      akahad_height := v0

      jump skip_slow_camera_height
    end

    #jump0 speed_camera_apply_choose

    i := long level_scratch_data

    :calc akahad_level_index_jump { 3 + 3 * 8 }
    v0 := akahad_level_index_jump

    # We need to combine:
    # level_draw_h_steppy
    # with 
    # speed 
    # and our tile type

    # Tile type may be so simple as to not need anything beyond 'set height to me'
    # Speed is 1 2 4 so only needs a * 2
    # Steppy is 0-7 so needs to be multiplied up depending on the speed

    # Load up the jump table version of the tile copy we're on:
    i += v0
    load v0 - v0



    jump0 level_height_is_this_one_really_simple

    # If the hight different for this tile is either at most 1 or 0, we can just go there now
    # ie it just doesn't matter

    # but if it does matter, we want to jump based on our speed

    : level_height_is_this_one_really_simple
    v0 <<= v0     jump level_height_it_is_not_simple_speed # -4
    v0 <<= v0     jump level_height_it_is_not_simple_speed # -3
    v0 <<= v0     jump level_height_it_is_not_simple_speed # -2
    v0 <<= v0     jump level_height_it_is_not_simple_speed # -1.5
    jump yes_its_simple 0 0
    jump yes_its_simple 0 0
    jump yes_its_simple 0 0
    jump yes_its_simple 0 0
    jump yes_its_simple 0 0
    v0 <<= v0     jump level_height_it_is_not_simple_speed # + 1.5
    v0 <<= v0     jump level_height_it_is_not_simple_speed # + 2
    v0 <<= v0     jump level_height_it_is_not_simple_speed # + 3
    v0 <<= v0     jump level_height_it_is_not_simple_speed # + 4


    : level_height_it_is_not_simple_speed

    # The steps table is 24 bytes per tile, with 8 bytes per speed
    # There are 13 speeds: thus we have to crawl 312 bytes
    # our v0 currently is strided out to 8 bytes per tile, so if we can get that to 12
    # without it being real bad, we can add it twice
    load v1 - v1
    v0 += v1

    i := long speedo_table
    i += level_draw_speed
    load v2 - v2

    i := long steps_table
    i += v0
    i += v0
    i += v2
    i += level_draw_h_steppy

    load v0

    akahad_height += v0

    : skip_slow_camera_height

    i := sad_stash
    save vF

    # Set the limit
    vE := 128
    if level_draw_h_steppy == 7 then vE := 120

    # We can redraw the floor, using level_draw_h_steppy as a horizontal offset:
    # This will set v4 to the vE limit above
    level_floor_redraw_sad

    # If we are drawing a new tile today:
    if v4 != 128 begin

    
      # The current level tile tells us what kind of floor the new tile is
      # This allows us to place it correctly into the world.
      # It would also tell us what to do about the floor the akahad is on
      # We select the correct doodle
      # This works, somehow:
      v0 <<= current_level_tile
      v0 <<= v0
      v0 += 24

      # Provided akahad height is 'correct' at the beginning, we could instead use this value of v0

      # We also calculate 'halves' based on the remaining value for the half slopes:
      # We use this value of vE in apply_level_step
      # calculate halves:
      vE := 0x01
      vE &= current_remaining

      jump0 apply_level_step

      # -ve is uphill 
      # Slopes 
      # -4 = 0
      # -3 = 1
      # -2 = 2
      # -1.5 3
      # -1 = 4
      # -0.5 5
      # 0  = 6
      # 0.5 =7
      # 1 =  8
      # 1.5 =9
      # 2 =  10
      # 3 =  11
      # 4 =  12

      : apply_level_step
      floor_draw_height += -4     jump resume_floor_stuff
      floor_draw_height += -3     jump resume_floor_stuff
      floor_draw_height += -2     jump resume_floor_stuff
      floor_draw_height += -2     jump floor_and_also_step
      floor_draw_height += -1     jump resume_floor_stuff
      floor_draw_height -= vE     jump resume_floor_stuff
      floor_draw_height +=  0     jump resume_floor_stuff
      floor_draw_height += vE     jump resume_floor_stuff
      floor_draw_height +=  1     jump resume_floor_stuff
      floor_draw_height +=  1     jump floor_and_also_step
      floor_draw_height +=  2     jump resume_floor_stuff
      floor_draw_height +=  3     jump resume_floor_stuff
      floor_draw_height +=  4     jump resume_floor_stuff

      : floor_and_also_step
      floor_draw_height += vE
      : resume_floor_stuff

      # Here we save the needed data for this tile:
      # Where does this floor go:
      # Put the jump table strider into v3:
      v3 := v0

      v0 := floor_draw_height

      # And what sprite offset do we use:
      v1 := current_level_tile
      v1 += 6
      i := mul_6
      i += v1
      load v1 - v1

      i := long level_scratch_data
      i += v4
      v2 := current_level_tile
      save v3

      # Draw the tile relative to our current height:
      v0 -= akahad_height

      i := long tile_select
      i += v1

      # Floor challenge takes screen height in v0
      # it clobbers v1
      # it expects the horiziontal draw position in the alias level_draw_h_position
      # if also uses v3 == 0 as a tool:
      v3 := 0
      floor_challenge_mode

      # Now we stash, and copy the whole data block:

      
    end

    i := level_draw_stash
    save current_remaining - mystery_level_var


    i := is_game_over
    load special_game_register - special_game_register

    # shall we make an object?

    if level_draw_h_steppy != 7 then jump avoid_object_stuff

    if special_game_register != 0 then jump avoid_object_stuff

    i := long orb_decider
    load v0 - v3

    # Set a new timer:
    if v0 == 0 begin
      v0 := 64
      # select a pattern:
      v1 := random 0b11100000
    end

    v0 += -2

    i := long orb_decider
    save v0 - v3

    i := long orb_patterns
    i += v1
    i += v1
    i += v0

    # should we make an orb?
    load v1


    if v0 != 0 begin
      v0 -= 1
      if v1 == 0x80 then v1 := random 0b00011111
      # v1 will be the height
      make_object
      jump avoid_object_stuff
    end

    # if we didn't create an object, shall we make one anyway?
    v0 := random 0b00011111

    if v0 == 1 begin
      v0 := random 0b00000011

      v1 := random 0b00011111

      make_object
    end


    : avoid_object_stuff
    # We can draw items into the level

    draw_collider

    v4 := 0

    loop
      i := game_objects
      i += v4
      # We can have 8 game objects, that should be plenty
      load v0 - v3

      if v0 == -1 then jump object_is_empty

      v1 -= level_draw_speed

      if vF == 0 begin
        : object_wipe_object
        i := empty_object
        load v3

        i := game_objects
        i += v4
        save v3
        jump object_is_empty
      end

      save v0 - v1

      v2 -= akahad_height

      # keep objects that exist on the screen
      if v2 >= 200 then v2 := 0
      if v2 >= 56 then v2 := 56


      i := mul_15
      i += v0
      load v3 - v3

      i := long objects_all_indexes
      i += v3

      # are we colliding with the dahaka?
      sprite v1 v2 15


      if vF != 0 begin
        # we hit it!
        # is this even possible?
        # v1 must be in the area of the dahaka

        # our position on the screen is 21
        # the collider extends 12 pixels out, so the draw position must be less than 33


        if v1 >= 31 then jump object_false_hit
        # if it's 21 - 4 behind us that's uh.. 
        if v1 < 17 then jump object_false_hit

        sprite v1 v2 15

        if v0 == 0 begin
          draw_obs_gotten_nocalc
          i := orb_data
          load v0 - v0
          v0 += 1
          if v0 == 0 then v0 := 255
          save v0 - v0
          draw_orbs_gotten
          jump object_wipe_object
        end

        if v0 == 1 begin
          i := level_draw_stash_speed
          load v0
          if v0 == 4 then jump blow_up_that_barrier
          if v0 == 8 then jump blow_up_that_barrier

          # are we boosting?
          draw_obs_gotten_nocalc
          i := orb_data
          load v0 - v0
          v1 := 3
          v0 -= v1
          if vF == 0 then v0 := 0
          save v0 - v0
          draw_orbs_gotten

          # make some dropped orbs
          v0 := 0

          i := akahad_stash_xy
          load v1 - v2
          i := orb_xy_pos
          save v1 - v2

          yo_add_some_droped_orbs
          yo_add_some_droped_orbs

          jump object_wipe_object

          : blow_up_that_barrier

          i := akahad_stash_xy
          load v1 - v2
          i := orb_xy_pos
          save v1 - v2

          v0 := 15
          yo_add_some_droped_orbs
          jump object_wipe_object

        end

        if v0 == 2 begin
          v0 := 1
          mod_boost_guage
          v0 := 1
          mod_boost_guage
          v0 := 1
          mod_boost_guage
          jump object_wipe_object
        end

        if v0 == 3 begin
          i := boost_from_rings
          load v0 - v1
          v0 += 1
          save v0 - v1

          jump object_wipe_object
        end

        

      end
      : object_false_hit

      # if we're keeping it, add it to the undraw list:
      i := object_quick_undraw
      i += v4
      save v3

      : object_is_empty
      v4 += 4
      if v4 != 32 then
    again

    # this puts us back in plane 1:
    draw_collider
    #plane 1

    i := animation_steppo
    load v4 - v4

    i := level_draw_stash_speed
    load v3 - v3

    i := is_game_over
    load special_game_register - special_game_register

    # we know how many frames have elapsed
    i := timer_tron
    load v0 - v1

    if special_game_register == 0 begin
      if v3 != 1 then v0 += 1
      if v3 == 1 begin
        if v4 == 0 then v0 += 1
      end
      if v0 == 60 then v1 -= 1
      if v0 == 60 then v0 := 0
      save v0 - v1


      if v1 == 0 begin

        # game over
        i := is_game_over
        v0 := 1
        save v0

      end
    end

    if special_game_register != 0 begin
      : definitely_start_the_game

      i := is_game_over
      load v4 - v5

      : do_over_on_game_over

      i := orb_data
      load v2 - v3

      # Regular level end, assess if we won or not?
      if v4 == 1 begin
        # regular level ended
        # We create a short window where we flatten out the floor for 100 frames, and then we block input with
        # game over = 4

        if v5 == 100 begin
          # Block input:
          v4 := 4
          v5 := 0
          jump do_over_on_game_over
        end

        v5 += 1
      end


      # Input blocking version:
      if v4 == 4 begin
        if v5 == 100 begin      
          
          # Find out if we won or lost:
          v4 := 9
          if v2 >= v3 then v4 := 6

          v5 := 0
          jump do_over_on_game_over

        end


        if v5 == 0 begin
          : also_do_text_0
        end

        #if v5 == 255 then v4 := 2
        v5 += 1
      end

      # First time load in:
      if v4 == 5 then jump also_do_2_but_no_bonus
      if v4 == 2 begin
        : also_do_2_but_no_bonus

        if v5 == 255 then jump also_do_text
        if v5 == 0 begin

          if v4 != 5 begin
            # This now pops orbs out every time:
            v1 := 32
            v2 := 0
            i := orb_xy_pos
            save v1 - v2

            v0 := 0
            yo_add_some_droped_orbs
            yo_add_some_droped_orbs
          end

          draw_obs_gotten_nocalc
          draw_obs_needed_nocalc

          

          i := orb_data
          load v0 - v1
          v0 -= v1
          if vF == 0 then v0 := 0

          save v0


          draw_orbs_gotten

          : also_do_text
          v0 := 28
          v1 := 24
          
          i := long text_you_need
          ez_text
          v0 += 8
          ez_text

          i := levels_complete
          load v0
          i := mul_5
          i += v0
          load v0
          i := long levels_table
          i += v0

          v7 := v0

          load v1 - v2
          # this gives us the time and orb count we'll need

          if v5 == 0 begin 
            i := timer_seconds
            save v1 - v1

            i := needed_orbs
            save v2 - v2

            v1 := v2
            draw_orbs_needed
          end

          i := long levels_table
          i += v7

          load v1

          load v2

          v3 := 24
          vF := 80

          i := hex v0
          sprite vF v3 5
          vF := 86
          i := hex v1
          sprite vF v3 5
          vF := 92
          i := hex v2
          sprite vF v3 5

          i := long akahad_coin_1col
          v0 := 98
          v1 := 23
          sprite v0 v1 8

        end


        if v4 == 2 begin
          v0 := 31
          v0 &= v5

          if v0 == 1 then mod_boost_guage
        end

        
        if v5 == 255 then v4 := 3
        v5 += 1

      end

      if v4 == 3 begin

        if v5 == 255 then jump also_do_text_2
        if v5 == 0 begin

          : also_do_text_2
          v0 := 35
          v1 := 24
          i := long text_get_ready
          ez_text
          v0 += 8
          ez_text
        end

      
      if v5 == 255 then v4 := 0
      v5 += 1

      end

      if v4 == 9 then jump also_slide_ecnirp_in
      if v4 == 6 begin
        : also_slide_ecnirp_in
        # We want to scroll the ecnirp onto the screen

        if v5 == 0 begin

          v0 := 26
          v1 := 15

          i := long text_fate
          ez_text

          v0 += 8

          if v4 == 6 then i := long text_enforced
          if v4 == 9 then i := long text_escaped

          ez_text
          v0 += 8
          ez_text

        end


        if v5 == 0x2D begin
          # then we do something else:

          v4 += 1
          v5 := 0
          undraw_ecnirp_and_clear
          jump do_over_on_game_over
        end

        undraw_ecnirp

        draw_ecnirp_in

        v5 += 1

      end

      if v4 == 7 begin
        # We will trap ourselves in here while we win:

        : fate_enforced
        # We are on frame 0 of the enforcement

        # we want to current fate frame
        # There is by no akahad, and no ecnirp at the moment, so, we're free to do whatever

        v7 := 1
        draw_fate_ending

        if v6 == -4 then jump fate_animation_ended


        v2 <<= v2
        v2 <<= v2

        v2 += -1
        v2 += -1

        vF := v2
        f_delay

        v7 := 0
        draw_fate_ending

        i := long fate_frame_current
        load v0 - v0
        v0 += v6
        save v0 - v0


        jump fate_enforced

        : fate_animation_ended

        clear_ecnirp

        i := long levels_complete
        load v0 - v0
        v0 += 1
        save v0 - v0

        v4 := 2
        v5 := 0

        v0 := 26
        v1 := 15

        i := long text_fate
        ez_text

        v0 += 8

        i := long text_enforced
        ez_text
        v0 += 8
        ez_text


        jump do_over_on_game_over

      end



      # If we lost the game:
      if v4 == 10 begin


        if v5 == 0 begin
          v0 := 36
          v1 := 22

          i := long text_game_over
          ez_text
          v0 += 8
          ez_text

        end

        v6 := v5
        v5 := 0x2D
        undraw_ecnirp
        draw_ecnirp_in
        v5 := v6


        plane 2
        # Just animate dying
        v0 := 127
        v1 := 3


        if v5 < 128 begin        

          v2 := 0b00011100
          v2 &= v5
          v2 >>= v2
          v2 >>= v2

          i := mul_15
          i += v2
          load v2 - v2

          i := long gameover_waterfall
          i += v2

          v0 -= v5

          loop
            sprite v0 v1 15
            v1 += 15

            if v1 != 48 then
          again
        end

        v5 += 1

        if v5 == 100 begin
          i := akahad_stash
          load v0 - v2
          v2 := AKA_DEAD
          v1 := 0
          save v0 - v2
        end

        if v5 == 255 begin
          clear_ecnirp
          jump main

        end
      end

      i := is_game_over
      save v4 - v5

    end



    plane 2
    draw_ballistic_stuff
    i := timer_tron
    load v0 - v1
    draw_timer
    plane 1

  again


: undraw_ecnirp
  i := long ecnirp_data
  load v3
  if v0 != -1 begin
    i := long ecnirp_run
    i += v0
    sprite v1 v2 8
  end
;

: undraw_ecnirp_and_clear
  undraw_ecnirp
: clear_ecnirp
  i := long ecnirp_data
  v0 := -1
  v3 := 0
  save v3
;

: draw_ecnirp_in
  i := long ecnirp_data
  load v3

  v1 := 127
  v1 -= v5

  v3 += 1
  v0 := 0b00001100
  v0 &= v3

  v2 := 40



  v0 <<= v0

  i := long ecnirp_run
  i += v0
  sprite v1 v2 8

  i := long ecnirp_data
  save v3
;

: draw_fate_ending

    v6 := 2

    i := long fate_frame_current
    load v0

    i += v0
    
    load v2

    if v0 == -3 begin
      # Animation sequence is over
      i := long fate_frame_current
      v0 := 0
      save v0
      v6 := -4
      return
    end
    # We now have the akahad and ecnirp fate frames in memory:

    i := long akahad_fate
    i += v0
    i += v0
    i += v0
    i += v0

    v4 := akahad_x_position_global
    v5 := 32

    sprite v4 v5 0

    if v1 == -1 begin
      # if v1 is -1 we want to have a running ecnirp
      v5 := 0x2D
      if v7 == 1 then draw_ecnirp_in
      if v7 == 0 then undraw_ecnirp

      v2 := 1
      jump fate_ecnirp_handled
    end

    if v1 == -2 begin
      # nothing

      v2 := 1
      jump fate_ecnirp_handled
    end


    i := long ecnirp_fate
    i += v1
    i += v1
    i += v1
    i += v1

    v4 := 79
    v5 := 32

    v6 := 3

    sprite v4 v5 0


    : fate_ecnirp_handled
;


: yo_add_some_droped_orbs
  i := yet_another_stash
  save vF
  vF := -8
  loop
    vF += 8
    i := long bal_list
    i += vF

    load v1 - v1

    if vF == 64 then jump didnt_add_fake_orbs_boo
    if v1 != -1 then
  again
  
  i := orb_xy_pos
  # Starting X Y point:
  load v1 - v2
  
  # Starting sub pixels are both middle:
  v3 := 0x80
  v4 := 0x80

  # Set Vx to be random:
  if v0 == 0 then v5 := random 0b11111111
  if v0 == 15 begin
    v5 := random 0b01111111
    v5 += 0x80
  end
  # set Vy to be random, too:
  v6 := random 0b01111111

  v6 += 0x80

  i := long bal_list
  i += vF
  save v7

  : didnt_add_fake_orbs_boo
  i := yet_another_stash
  load vF
;

: orb_xy_pos
0 0

: draw_ballistic_stuff
  i := yet_another_stash
  save vF

  plane 2
  v8 := -8

  loop
    : i_guessed_this_would_work_but_maybe_not_lol
    v8 += 8
    if v8 == 64 then jump exit_ballistic_loop
    i := long bal_list
    i += v8
    load v0 - v7

    if v0 == -1 then jump i_guessed_this_would_work_but_maybe_not_lol

    v9 <<= v6
    vE := vF

    # we need to apply gravity but not flip the sign bit:
    vA := 0x2
    v6 += vA

    v9 <<= v6    
    if vF == 1 begin
      if vE == 0 then v6 := 127
    end


    v9 <<= v5

    if vF == 0 begin
      # is positive:
      v3 += v5
      if vF != 0 then v1 += 1
      vF := 2
    end
    if vF == 1 begin
      v3 += v5
      if vF == 0 then v1 -= 1
    end

    v9 <<= v6
    if vF == 0 begin
      # is positive:
      v4 += v6
      if vF != 0 then v2 += 1
      v4 += v6
      if vF != 0 then v2 += 1
      vF := 2
    end
    if vF == 1 begin
      v4 += v6
      if vF == 0 then v2 -= 1
      v4 += v6
      if vF == 0 then v2 -= 1
    end

    if v2 == 63 then v0 := -1
    if v1 == 0 then v0 := -1
    if v1 == 127 then v0 := -1

    save v0 - v7

    if v0 == -1 then jump i_guessed_this_would_work_but_maybe_not_lol

    i := long objects_all_indexes
    i += v0
    sprite v1 v2 15

  again

  : exit_ballistic_loop

  plane 1
  i := yet_another_stash
  load vF

;

: yet_another_stash
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

: make_object

  get_empty_game_object

  if v4 == 32 then return

  #v0 := 0
  
  v2 := floor_draw_height

  if v0 == 0 begin
    v2 -= 12
    v2 -= v1
  end
  if v0 == 1 begin
    v2 -= 14
  end
  if v0 == 2 begin  # boost increase
    v2 -= 12
    vF := random 0b00011111
    v2 -= vF
  end
  if v0 == 3 begin  # boost ring
    v2 -= 14
    vF := random 0b00001111
    v2 -= vF
  end



  i := game_objects
  i += v4

  v1 := 127
  save v3
;


: ez_text
  v2 := 5
  sprite v0 v1 5
  i += v2
  v0 += 8
  sprite v0 v1 5
  i += v2
  v0 += 8
  sprite v0 v1 5
  i += v2
  v0 += 8
  sprite v0 v1 5
  i += v2
;

: draw_collider
  plane 1
  i := akahad_sash_state
  load akahad_state - akahad_draw_y
  i := long akahad_collider
  if akahad_state != AKA_BALL then sprite akahad_draw_x akahad_draw_y 0
;

: get_empty_game_object
  vF := -1
  v4 := 0
  
  loop
    i := game_objects
    i += v4
    load vF - vF
    if vF == -1 then return

    v4 += 4
    if v4 != 32 then
  again
;
  
: empty_object
-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0


: objects_undraw
    v4 := 0
    plane 3

    loop
      i := object_quick_undraw
      i += v4
      # We can have 8 game objects, that should be plenty
      load v0 - v3

      if v0 == -1 then jump undraw_object_is_empty

      i := long objects_all_indexes
      i += v3

      sprite v1 v2 15

      : undraw_object_is_empty
      v4 += 4
      if v4 != 32 then
    again

    i := filth_stash
    save vF

    i := empty_object
    load vF
    i := object_quick_undraw
    save vF
    save vF

    i := filth_stash
    load vF

    plane 1
;

: filth_stash
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0


: object_quick_undraw
# id X Y graphic_off
-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0

-1 0 0 0
-1 0 0 0
-1 0 0 0
-1 0 0 0

: game_objects
# ID X Y 
-1 0 0 0
-1 0 0 0 
-1 0 0 0 
-1 0 0 0 

-1 0 0 0 
-1 0 0 0 
-1 0 0 0 
-1 0 0 0 

: mul_30
# we can have 7 object types
0 30 60 90 120 150 180 210

: mul_15
0 15 30 45 60 75 90 105 120 135 150 165


: select_new_map_tile

  # We could be loading from a level, but instead, we just 
  v0 := random 0b00000001

  if v0 == 0 then current_level_tile += -1
  if v0 == 1 then current_level_tile += 1

  if current_level_tile == -7 then current_level_tile := -5
  if current_level_tile ==  7 then current_level_tile := 5

  v0 := random 0b00000011
  current_remaining := v0
  current_remaining += 2

;












: level_floor_redraw_sad

  :alias level_draw_h_position vD

  v3 := 0
  v4 := 0

  level_draw_h_position := level_draw_h_steppy
  if level_draw_speed == 8 then level_draw_h_position := 0

  plane 2
  clear
  loop
    # This is the loop that's using up 30% + of my time
    # An additional 15% is used up by floor_challenge_mode
    # Effectively, we redraw the floor every frame, which involves
    # iterating over 32 4px wide 'zones' that are stored in memory
    # Becase we do this 32 times per frame, every instruction here is incredibly high cost to the game
    # So if I can eliminate any instructions, then that's gravy!

    # Best guesses right now:
    # Change the stride of the scratch data to be 4 registers wide
    # There's plenty of room to do this, and, the impact will be less obvious once the
    # scratch area usage is slghtly less stupid

    # Load up the current floor tile:
    i := long level_scratch_data
    i += v4
    load v1

    # So in principal
    # we don't need to do this if we aren't drawing a tile, due to it being off screen:
    # But usually there will be tiles on screen, no?

    # Select the correct slope for this tile:
    i := long tile_select
    i += v1

    # We translate the true vertical position of the tile to our camera:
    v0 -= akahad_height

    # So, by replacing all 'returns' with 'jumps' I do save an instruction per pass.
    # But this is kind of a pain in the butt since I do reuse the code to draw the new tile
    # but... all those subroutine calls...
    floor_challenge_mode

    # Iterate:
    v4 += 8
    level_draw_h_position += 8
    if v4 != vE then
  again
;

: floor_challenge_mode

  # We could +5, then shift, then process a huge jump table

  # We take a copy of v0 into v1, now that v1 (sprite offset) has served
  # its purpose
  # v4 will be the x position
  # v1 will by the y position

  # We only care about tiles that are up to 5 pixels 'above' the top of the screen:
  v1 := v0
  v0 += 5
  # And we need to x2 for jump0
  v0 <<= v0
  # And if we are 'too big' we could just clamp to max:
  # We could eliminate the need if we 'fix' the heights every so often
  # But we know that we're just going through the table for no reason if vF is set so we can just return
  if vF != 0 then return

  # Then we perform the worst jump table ever constructed:
  jump0 the_worst_jump_table_ever

  # Which normally jumps to here:
  : situation_normal
  sprite level_draw_h_position v1 6
;


: the_worst_jump_table_ever

# These 5 are the more expensive clippings, as they have more instructions
jump was_-5
jump was_-4
jump was_-3
jump was_-2
jump was_-1

# 0-9
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal

# 10-19
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal

# 20-29
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal

# 30-39
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal

# 40-49
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal

# 50-58
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal

jump situation_normal
jump situation_normal
jump situation_normal
jump situation_normal


# These 5 could be replaced by the 'non wrapping' quirk, but they are the cheaper set
# 59
jump was_59
jump was_60
jump was_61
jump was_62
jump was_63

# 64 and, sadly, now we need literally every other value to do nothing lol
return

# + 16
return return
return return
return return
return return
return return
return return
return return
return return

# +32
return return
return return
return return
return return
return return
return return
return return
return return

# +48
return return
return return
return return
return return
return return
return return
return return
return return

# +64
return return
return return
return return
return return
return return
return return
return return
return return


: was_-5
v0 := 5   i += v0   sprite level_draw_h_position v3 1   ;
: was_-4
v0 := 4   i += v0   sprite level_draw_h_position v3 2   ;
: was_-3
v0 := 3   i += v0   sprite level_draw_h_position v3 3   ;
: was_-2
v0 := 2   i += v0   sprite level_draw_h_position v3 4   ;
: was_-1
v0 := 1   i += v0   sprite level_draw_h_position v3 5   ;

: was_59
  sprite level_draw_h_position v1 5 ;
: was_60
  sprite level_draw_h_position v1 4 ;
: was_61
  sprite level_draw_h_position v1 3 ;
: was_62
  sprite level_draw_h_position v1 2 ;
: was_63
  sprite level_draw_h_position v1 1 ;



# Make a better scratch system in the future:
: bad_scratch

    i := filth_stash
    save vF

    i := long level_scratch_data
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF
    v0 := 8
    i += v0
    load v0 - vF
    save v8 - vF

    i := filth_stash
    load vF
;
















: mul_5
0
5
10
15
20
25
30
35
40
45
50
55
60
65
70
75
80
85
90
95
100
105


: mul_6
0
6
12
18
24
30
36
42
48
54
60
66
72
78
84
90
96
102
108
114
120


: levels_complete
0

: is_game_over

0 0


: akahad_state_manage
  jump main_back_from_manage
  jump akahad_manage_running
  jump akahad_manage_jumping
  jump akahad_manage_ball
  jump akahad_manage_slam
  jump akahad_manage_no_input
  jump akahad_manage_dead




: akahad_state_service
  jump main_back_from_service
  jump akahad_service_running
  jump akahad_service_jumping
  jump akahad_service_ball
  jump akahad_service_slam
  jump akahad_service_running
  jump akahad_service_dead


: akahad_manage_no_input
  jump main_back_from_manage

: akahad_manage_running
  # if we are running then we can...
  
  # jump:
  # don't allow state change in these game over states:
  if v6 == 4 then jump main_back_from_manage
  if v6 == 6 then jump main_back_from_manage
  if v6 == 10 then jump main_back_from_manage

  v1 := OCTO_KEY_W if v1 key then akahad_state := AKA_JUMP
  v1 := OCTO_KEY_S if v1 key then akahad_state := AKA_BALL
  jump main_back_from_manage



  :calc akahad_jump_middle_point { 26 / 2 }
  :calc akahad_jump_end_point { 70 / 2 }
  :calc akahad_jump_frame_count { 64 }
  :calc akahad_jump_frame_count_plus_one { akahad_jump_frame_count + 1 }
  :calc akahad_jump_frame_count_plus_two { akahad_jump_frame_count + 2 }

: akahad_manage_jumping
  # if we are jumping then we can...

  if akahad_frame == akahad_jump_frame_count then akahad_state := AKA_RUN
  if akahad_frame == akahad_jump_frame_count_plus_one then akahad_state := AKA_RUN
  if akahad_frame == akahad_jump_frame_count_plus_two then akahad_state := AKA_RUN
  # butt slam?

  v1 := OCTO_KEY_X if v1 key then jump also_slam

  v1 := OCTO_KEY_S if v1 key begin
    : also_slam
    akahad_state := AKA_SLAM
    # need to set up the slam start
    i := long jump_arc
    i += akahad_frame
    i += akahad_frame
    i += akahad_frame
    i += akahad_frame
    load akahad_frame - akahad_frame

    if akahad_frame == 0 then akahad_frame := 1
  end

  jump main_back_from_manage

: akahad_manage_ball

  if akahad_frame == 4 begin
    :calc frame_ball_end_frame { 9 * 16 }
    if akahad_draw_off == frame_ball_end_frame then akahad_state := AKA_RUN

  end

  jump main_back_from_manage

: akahad_manage_slam

  if akahad_frame == 0 then akahad_state := AKA_RUN

  jump main_back_from_manage

: akahad_manage_dead
  # we dead oh no
  jump main_back_from_manage

: main_back_from_manage
  # If these no longer match:
  if v0 != akahad_state begin
    if akahad_state != AKA_SLAM then akahad_frame := 0
    akahad_draw_off := 0
  end


  jump true_main_back_from_manage


: akahad_service_running
  
  # if we're in speed 1, I want to move more slowly

  i := level_draw_stash_speed
  load v0

  if v0 == 2 begin
    if v4 == 0 then akahad_frame += 1
    if v4 == 2 then akahad_frame += 1
    jump just_get_on_with_running
  end

  if v0 != 1 begin
    akahad_frame += 1
    jump just_get_on_with_running
  end

  if v4 == 1 then akahad_frame += 1

  : just_get_on_with_running
  if akahad_frame == 6 then akahad_frame := 0

  i := mul_16
  i += akahad_frame
  load akahad_draw_off - akahad_draw_off

  jump main_back_from_service


: akahad_service_jumping

  if akahad_frame == 0                          then akahad_draw_off := 96
  if akahad_frame == akahad_jump_middle_point   then akahad_draw_off := 112

  if akahad_frame == akahad_jump_end_point      then akahad_draw_off := 128
 
  i := long jump_arc
  i += akahad_frame
  i += akahad_frame
  i += akahad_frame
  i += akahad_frame
  load v1 - v1

  akahad_draw_y -= v1
  akahad_frame += 1

  if akahad_draw_off != 96 then jump skip_fast_jump
    
    if akahad_frame == akahad_jump_middle_point   then akahad_draw_off := 112
    v1 := OCTO_KEY_W if v1 key then akahad_frame += 1

  : skip_fast_jump
  

  jump main_back_from_service


: akahad_service_ball

  :calc frame_ball_loop_end { 6 * 16 }
  :calc frame_ball_loop_start { 3 * 16 }
  :calc frame_ball_end_sequence { 7 * 16 }

  #akahad_draw_off

  if akahad_frame != 0 then akahad_draw_off += 16
  if akahad_frame == 0 then akahad_frame := 1

  if akahad_frame == 3 begin
    akahad_frame := 4
    akahad_draw_off := frame_ball_end_sequence
  end


  if akahad_draw_off == frame_ball_loop_end then akahad_draw_off := frame_ball_loop_start
  if akahad_draw_off == frame_ball_loop_start then akahad_frame := 2



  if akahad_frame == 2 begin
    if v6 == 4 then akahad_frame := 3
    if v6 == 10 then akahad_frame := 3
    v1 := OCTO_KEY_S if v1 -key then akahad_frame := 3
  end

  jump main_back_from_service


: akahad_service_slam

  akahad_draw_off := 128
  v0 := 4
  akahad_frame -= v0
  if vF == 0 then akahad_frame := 0

  akahad_draw_y -= akahad_frame


  jump main_back_from_service

: akahad_service_dead
  # We have died and we need to draw a spinning head
  
  if akahad_frame == 0 begin
    v0 := v0
    akahad_frame := 8
  end

  akahad_draw_off += 16
  if akahad_draw_off == 96 then akahad_draw_off := 0

  :calc akahad_x_dead_position_global { akahad_x_position_global + 2 }

  akahad_draw_x := akahad_x_dead_position_global
  akahad_draw_y -= 4
  akahad_draw_y += 0xA

  if akahad_frame != 0x4D begin

    i := long jump_arc
    i += akahad_frame
    i += akahad_frame
    i += akahad_frame
    i += akahad_frame
    load v1 - v1

    akahad_draw_y -= v1

    akahad_frame += 1
  end
  
  if akahad_frame == 0x4D then akahad_draw_off := 96

jump main_back_from_service


: main_back_from_service

  jump true_main_back_from_service

: sad_stash
 0 0 0 0
 0 0 0 0
 0 0 0 0
 0 0 0 0

: akahad_stash
 0 0 
 : akahad_sash_state
  0 
 : akahad_stash_xy 0
 0 0 0 0

: level_draw_stash
 0 0 0 0
 0 
: level_draw_stash_speed
 0 0 0

: mul_16
0 16 32 48 64 80 96 112 128
144 160 176 192 208 224 240


: mul_32
0 32 64 96 128
160 192 224

: boost_guage_last
 0 

: mod_boost_guage

  # modify boost guage. Either we draw it in place, or 1 higher
  i := boost_guage_last
  load v3 - v3

  if v3 == 0 begin
    if v0 == 0 then return
  end

  if v3 == 64 begin
    if v0 == 1 then return
  end

  # Undraw the old peak:

  i := long boost_gauge_step
  v2 := 58

  v1 := 31
  v1 += v3
  v1 += v0

  sprite v1 v2 5

  v3 += v0
  if v0 == 0 then v3 += -1


  i := boost_guage_last
  save v3 - v3

;

: orb_data
 0 
: needed_orbs
 0

: draw_orbs_gotten
  i := orbs_bcd
  bcd v0

: draw_obs_gotten_nocalc
  i := orbs_bcd
  load v2

  i := hex v0
  v3 := 1
  vF := 28
  sprite vF v3 5

  i := hex v1
  v3 := 1
  vF := 34
  sprite vF v3 5

  i := hex v2
  v3 := 1
  vF := 40
  sprite vF v3 5
;


: draw_orbs_needed

  i := need_bcd
  bcd v1

: draw_obs_needed_nocalc
  i := need_bcd
  load v2

  i := hex v0
  v3 := 1
  vF := 110
  sprite vF v3 5

  i := hex v1
  v3 := 1
  vF := 116
  sprite vF v3 5

  i := hex v2
  v3 := 1
  vF := 122
  sprite vF v3 5
;

: need_bcd
 0 0 0


: orbs_bcd
 0 0 0

: q_delay
  vf := 1
: f_delay
  delay := vf
: do_delay
  loop
    vf := delay
    if vf != 0 then
  again
;

: draw_stupid_fireball_of_why_am_I_doing_this_With_less_than_2_hours
    i := level_draw_stash_speed
    load v0
    if v0 > 2 begin
      if v4 == 0 then i := long boost_sprite_1
      if v4 == 1 then return
      if v4 == 2 then i := long boost_sprite_2
      if v4 == 3 then return
      # if we're boosting
      v0 := akahad_draw_x
      v1 := akahad_draw_y
      v0 -= 11
      v1 -= 9

      v2 := 32

      plane 2
      sprite v0 v1 0
      i += v2
      v1 += 16
      sprite v0 v1 0
      v1 -= 16
      v0 += 16
      i += v2
      sprite v0 v1 0
      i += v2
      v1 += 16
      sprite v0 v1 0
      plane 1
    end
;

: quick_title
  v0 := 0
  loop
    v1 := 0
    sprite v0 v1 0
    i += v3
    v1 := 16
    sprite v0 v1 0
    i += v3

    v0 += 16
    if v0 != 64 then
  again
;

: timer_tron
0 
: timer_seconds
0

: timer_bcd
0 0 0 

: draw_timer
  v2 := 54
  v3 := 1
  plane 2

  i := timer_bcd
  bcd v1
  load v0
  load v1

  i := bighex v0 
  sprite v2 v3 10
  v2 += 10
  i := bighex v1
  sprite v2 v3 10

;



: animation_steppo
 0

: boost_from_rings
 0 0


:calc FREE { 4096 - HERE }

: tile_select

# 0
: uphill_4
0b00000011
0b00001111
0b00111111
0b11111110
0b11111000
0b11100000

# 5
: uphill_3
0b00000111
0b00111111
0b11111111
0b11111111
0b11111100
0b11100000

# 10
: uphill_2
0b00001111
0b11111111
0b11111111
0b11111100
0b11000000
0b00000000

# 15
: uphill_15
0b00001111
0b11111111
0b11111111
0b11111111
0b11110000
0b00000000

# 20
: uphill_1
0b00011111
0b11111111
0b11111111
0b11111111
0b11111000
0b00000000

# 25
: uphill_1_05
0b11111111
0b11111111
0b11111111
0b11111111
0b00000000
0b00000000

# 30
: floor
0b11111111
0b11111111
0b11111111
0b11111111
0b00000000
0b00000000

# 35
: downhill_05
0b11111111
0b11111111
0b11111111
0b11111111
0b00000000
0b00000000

# 40
: downhill_1
0b11111000
0b11111111
0b11111111
0b11111111
0b00011111
0b00000000

# 45
: downhill_15
0b11111000
0b11111111
0b11111111
0b11111111
0b00011111
0b00000000

# 50
: downhill_2
0b11110000
0b11111111
0b11111111
0b11111111
0b00111111
0b00000000

# 55
: downhill_3
0b11100000
0b11111000
0b11111110
0b11111111
0b00111111
0b00001111

# 60
: downhill_4
0b11000000
0b11110000
0b11111100
0b11111111
0b00011111
0b00000111









: akahad
 0x78 0x3C 0xFF 0xDE 0xFF 0xE3 0xCD 0xB3 0xC7 0xFF 0xFB 0xFE 0x77 0xDC 0x3F 0xFC
 0x37 0xEC 0x37 0xEC 0x37 0xEC 0x37 0xEC 0x07 0xE0 0x06 0x60 0x06 0x60 0x06 0x60
: akahad_2
 0x00 0x00 0x78 0x3C 0xFF 0xDE 0xFF 0xE3 0xCD 0xB3 0xC7 0xFF 0xFB 0xFE 0x77 0xDC
 0x3F 0xFC 0x77 0xEE 0x77 0xEE 0x67 0xE6 0x0F 0xF0 0x0C 0x30 0x0E 0x70 0x06 0x60

: akahad_running
0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x1D 0xFF 0x7F 0xEE
0x3F 0xE0 0x37 0xC0 0x6B 0xF0 0x4F 0xF8 0x7E 0x1C 0x27 0x0E 0x03 0x8E 0x01 0xFC
0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x1D 0xFF 0x7F 0xEE
0x3F 0xE0 0x67 0xC0 0x63 0x80 0x61 0xFE 0x61 0xCF 0x3E 0xC3 0x0C 0x67 0x00 0x3E
0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x1D 0xFF 0x7F 0xEE
0x3F 0xE0 0x47 0xF0 0xC3 0xF8 0xC0 0x1C 0x60 0x0C 0x78 0x0C 0x1E 0x0C 0x07 0xFC
0x00 0x00 0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x3D 0xFF
0x7F 0xEE 0x3F 0xE0 0x3F 0xFC 0x67 0xFE 0x66 0x87 0x63 0x03 0x3D 0xC6 0x00 0xFC
0x00 0x00 0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x1F 0xFF
0x7F 0xEE 0x7F 0xF0 0xC7 0xF8 0xC3 0x9C 0x60 0x0C 0x78 0x0C 0x1E 0x0C 0x07 0xFC
0x00 0x00 0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x1D 0xFF
0x7F 0xEE 0x7F 0xE0 0x67 0xC0 0x63 0xFE 0x61 0xCF 0x3E 0xC3 0x0C 0x67 0x00 0x3E
0x1E 0x1E 0x3F 0xEF 0x3F 0x53 0x37 0xFB 0x33 0xFF 0x1D 0xFF 0x0F 0xEE 0x7F 0xF0
0x1F 0xF8 0x07 0xF8 0x0F 0xE0 0x1E 0xF0 0x3C 0x70 0x39 0xF0 0x01 0xE0 0x00 0xC0
0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x1D 0xFF 0x07 0xEE 0x1F 0xF0
0x7F 0xFC 0x67 0xFC 0x0F 0xEC 0x0E 0xF0 0x1C 0x70 0x38 0x70 0x18 0xE0 0x00 0xE0
0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0xFB 0x33 0x5F 0x7D 0xFF 0x7F 0xFE 0x3F 0xF8
0x0F 0xF8 0x03 0xF0 0x03 0xE0 0x07 0xF0 0x0F 0xF8 0x0F 0x7C 0x1E 0x1C 0x1C 0x0C
0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0xFB 0x33 0x5F 0x7D 0xFF 0x7F 0xFE 0x3F 0xF8
0x0F 0xF8 0x03 0xF0 0x03 0xE0 0x07 0xF0 0x0F 0xF8 0x0F 0x7C 0x1E 0x1C 0x1C 0x0C

: akahad_ball
0x00 0x00 0x00 0x38 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x1F 0xFF 0x3F 0xFF
0x7B 0xEE 0x39 0xE0 0x63 0xF0 0x40 0x18 0x7C 0x1C 0x26 0x0E 0x03 0x0E 0x01 0xFC
0x00 0x00 0x01 0x80 0x0F 0x90 0x1F 0x0E 0x3F 0xE7 0x3F 0xF3 0x37 0x53 0x33 0xFB
0x3F 0xFF 0x77 0xFE 0x77 0xF8 0x5F 0xE8 0x77 0xC2 0x3C 0x0C 0x07 0xF0 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x20 0x03 0x80 0x1F 0xC8 0x1F 0xC0 0x3F 0xE6 0x3E 0xB6
0x37 0xFE 0x2B 0xFE 0x0F 0xFC 0x07 0xF8 0x23 0xF0 0x0D 0xE0 0x00 0x80 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xE0 0x03 0xF0 0x03 0xF8 0x07 0xF8 0x06 0xBC
0x0F 0xF8 0x0F 0xF0 0x0F 0xE0 0x0F 0xE0 0x03 0xC0 0x01 0x80 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x03 0xC0 0x07 0xE0 0x0F 0xF0 0x0E 0xB8
0x0F 0xF8 0x0F 0xF8 0x03 0xF8 0x01 0xE0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xF0 0x03 0xF0 0x0F 0xF8 0x0E 0xB8
0x0F 0xF8 0x0F 0xF8 0x0F 0xF0 0x03 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0x00 0x07 0xE0 0x0F 0xF0 0x0E 0xB8
0x0F 0xF8 0x0F 0xF8 0x0F 0xF8 0x03 0xF0 0x00 0xF0 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x03 0xC0 0x0F 0xE0 0x1F 0xF0 0x1F 0xF8 0x0E 0xBC
0x3F 0xF8 0x3B 0xFC 0x3F 0xFC 0x3F 0xFC 0x1F 0xFC 0x07 0x08 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x03 0xE0 0x1F 0xF2 0x3F 0xFE 0x1F 0x5E 0x17 0xFE
0x0B 0xFC 0x7F 0xFA 0x3F 0xF0 0x07 0xE4 0x23 0xFC 0x3F 0xF8 0x0F 0xF8 0x03 0xE0
0x00 0x00 0x00 0x00 0x1E 0x06 0x3F 0xE3 0x3F 0xF3 0x37 0x5B 0x1F 0xFF 0x3F 0xFF
0x7F 0xEE 0x67 0xF0 0xC7 0xD8 0xC6 0x0C 0x60 0x04 0x78 0x00 0x1E 0x02 0x07 0xFC

: akahad_collider
0x00 0x00 0x03 0xC0 0x07 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x07 0xE0 0x03 0xC0 0x00 0x00 0x00 0x00 0x00 0x00

: single_px
0x80


: speedo_table
  0 0 8 16






    : steps_table
    # -4 
    # speed 1
    0 -1  0 -1  0 -1  0 -1  # so this is 24 bytes per speed
    # speed 2
    0 -1  0 -1  0 -1  0 -1
    # speed 4 
    0  0  0 -2  0  0  0 -2

    # -3
    # speed 1
    0  0 -1  0  0 -1  0 -1
    # speed 2
    0 -1  0 -1  0 -1  0  0
    # speed 4 
    0  0  0 -2  0  0  0 -1

    # -2
    # speed 1
    0  0  0 -1  0  0  0  0
    # speed 2
    0  0  0 -1  0  0  0  0
    # speed 4 
    0  0  0 -1  0  0  0  0

    # -1.5
    # speed 1
    0  0  0 -1  0  0  0  0 # And then the height fix will catch it at the end
    # speed 2
    0  0  0 -1  0  0  0  0
    # speed 4 
    0  0  0 -1  0  0  0  0

    # -1
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0

    # -0.5
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0

    # 0
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0

    # + 0.5
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0

    # +1
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0

    # +1.5
    # speed 1
    0  0  0  1  0  0  0  0 # And then the height fix will catch it at the end
    # speed 2
    0  0  0  1  0  0  0  0
    # speed 4 
    0  0  0  1  0  0  0  0


    # -2
    # speed 1
    0  0  0  1  0  0  0  0
    # speed 2
    0  0  0  1  0  0  0  0
    # speed 4 
    0  0  0  1  0  0  0  0

    # -3
    # speed 1
    0  0  1  0  0  1  0  1
    # speed 2
    0  1  0  1  0  1  0  0
    # speed 4 
    0  0  0  1  0  0  0  2

    # -4 
    # speed 1
    0  1  0  1  0  1  0  1  # so this is 24 bytes per speed
    # speed 2
    0  1  0  1  0  1  0  1
    # speed 4 
    0  0  0  2  0  0  0  2

:macro do-3   X { X X X }
:macro do-4   X { X X X X }
:macro do-16  X { do-4 X do-4 X do-4 X do-4 X }

: jump_arc
   0 1  1 1   2 2  2 3
   3 3  3 4   4 4  5 5
   5 5  6 6   6 7  7 7
   7 8  8 8   9 9  9 9

   10 10  10 11   11 11  11 12
   12 12  12 13   13 13  13 14
   14 14  14 15   15 15  15 16
   16 16  16 16   17 17  17 17

   18 18  18 18   18 19  19 19
   19 19  19 20   20 20  20 20
   21 21  21 21   21 21  21 22
   22 22  22 22   22 22  22 23

   23 23  23 23   23 23  23 23
   24 24  24 24   24 24  24 24
   24 24  24 24   24 24  24 24
   24 24  24 24   24 24  24 24

   24 24  24 24   24 24  24 24
   24 24  24 24   24 24  24 24
   24 24  24 24   24 24  24 24
   23 23  23 23   23 23  23 23
   23 22  22 22   22 22  22 22
   22 21  21 21   21 21  21 21
   20 20  20 20   20 19  19 19
   19 19  19 18   18 18  18 18
   17 17  17 17   16 16  16 16
   16 15  15 15   15 14  14 14
   14 13  13 13   13 12  12 12
   12 11  11 11   11 10  10 10
   9 9  9 9   8 8  8 7
   7 7  7 6   6 6  5 5
   5 5  4 4   4 3  3 3
   3 2  2 2   1 1 1 0

   -2 -2 -2 -2 -2 -2 -2 -2
   -4 -4 -4 -4 -4 -4 -4 -4
   -6 -6 -6 -6 -6 -6 -6 -6
   -8 -8 -8 -8 -8 -8 -8 -8
  -10 -10 -10 -10 -10 -10 -10 -10
  -12 -12 -12 -12 -12 -12 -12 -12
  -14 -14 -14 -14 -14 -14 -14 -14
  -16 -16 -16 -16 -16 -16 -16 -16



:macro default_level {
  :byte 0x00
  :byte { 6 * 6 }
  :byte { 0 }
  :byte { 0x18 }
  :byte { 0 }
  :byte { 0 }
  :byte { 0 }
  :byte { 0 }
}

: level_scratch_data
do-16 default_level
do-16 default_level
do-16 default_level
do-16 default_level
do-16 default_level
do-16 default_level
do-16 default_level
do-16 default_level
# etc

: restore_scratch
default_level

: objects_all_indexes

: akahad_coin_1col
0x3C 0x7A 0xFF 0xFF 0xBF 0x9F 0x46 0x3C
0x00 0x00 0x00 0x00 0x00 0x00 0x00 

: barrier_1col
0x3C 0x5A 0x5A 0x66 0x5A 0x5A 0x66 0x5A 
0x5A 0x66 0x5A 0x5A 0x66 0x7E 0xFF

: akahad_boost_item
0x66 0xF7 0x91 0x89 0xEF 0x66 0x00 0x00 
0x00 0x00 0x00 0x00 0x00 0x00 0x00

: akahad_boost_ring
0x18 0x24 0x24 0x24 0x42 0x42 0x42 0x42
0x42 0x42 0x42 0x24 0x24 0x24 0x18

: hud_texts

: hud_boost
0x79 0x8A 0x7A 0x8A 0x79 0xC7 0x28 0x28 0x28 0xC7 0x3C 0x82 0x9C 0xA0 0x1E 0xF8 0x20 0x20 0x20 0x20
: hud_orbs
0x71 0x8A 0x89 0x89 0x72 0xE7 0x28 0xE7 0x28 0x27 0xBC 0x82 0x9C 0xA0 0x9E 0x00 0x00 0x00 0x00 0x00
: hud_need
0x8B 0x98 0xA9 0xC8 0x8B 0xEF 0x20 0xE7 0x20 0xEF 0x9E 0xA2 0xA2 0xA2 0x9E 0x00 0x00 0x00 0x00 0x00

0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


: text_you_need
0x89 0x52 0x22 0x12 0x09 0xC8 0x28 0x28 0x28 0xC7 0x80 0x80 0x80 0x80 0x00 0x8B 0x98 0xA9 0xC8 0x8B 0xEF 0x20 0xE7 0x20 0xEF 0x9E 0xA2 0xA2 0xA2 0x9E 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: text_get_ready
0xF3 0x08 0xC9 0x88 0x73 0xEF 0x22 0xE2 0x22 0xE2 0x80 0x00 0x00 0x00 0x00 0x7B 0x88 0x79 0x48 0x8B 0xE2 0x25 0xE8 0x2F 0xE8 0x1E 0x22 0xA2 0xA2 0x9E 0x89 0x51 0x21 0x10 0x09 0x40 0x40 0x40 0x00 0x40

: text_escaped
0xFB 0x08 0x79 0x0A 0xF9 0xCF 0x20 0xC0 0x00 0xEF 0x08 0x94 0xA2 0xBE 0x22 0x7B 0x88 0x79 0x08 0x0B 0xE7 0x28 0xE8 0x28 0xE7 0x80 0x80 0x80 0x80 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: text_enforced
0xFA 0x0A 0x7A 0x0B 0xFA 0x2F 0x60 0xA7 0x20 0x20 0x9C 0xA2 0xA2 0xA2 0x9C 0x7B 0x88 0x78 0x48 0x8B 0xCF 0x20 0x27 0x20 0xCF 0x9E 0xA2 0xA2 0xA2 0x9E 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: text_game_over
0xF0 0x09 0xCA 0x8B 0x72 0x88 0x4D 0x2A 0xE8 0x28 0xBE 0x82 0x9E 0x82 0xBE 0x01 0x02 0x02 0x02 0x01 0xC8 0x28 0x25 0x25 0xC2 0xBE 0x82 0x1E 0x02 0x3E 0x78 0x88 0x78 0x48 0x88 0x00 0x00 0x00 0x00 0x00

: text_fate
0xF8 0x09 0x7A 0x0B 0x0A 0x8F 0x42 0x22 0xE2 0x22 0xBE 0x02 0x1E 0x02 0x3E 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00



: fivewide_akahad_numbers
0x70 0x88 0x88 0x88 0x70
0x20 0x60 0x20 0x20 0xF8
0x70 0x88 0x30 0x40 0xF8
0xF0 0x08 0x70 0x08 0xF0
0x30 0x50 0x90 0xF8 0x10
0xF8 0x80 0xF0 0x08 0xF0
0x70 0x80 0xF0 0x88 0x70
0xF8 0x08 0x08 0x10 0x10
0x70 0x88 0x70 0x88 0x70
0x78 0x88 0xF8 0x08 0x08
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00


: fivewide_flipped_akahad_numbers 
0x70 0x88 0x88 0x88 0x70
0x20 0x30 0x20 0x20 0xF8
0x70 0x88 0x60 0x10 0xF8
0x78 0x80 0x70 0x80 0x78
0x60 0x50 0x48 0xF8 0x40
0xF8 0x08 0x78 0x80 0x78
0x70 0x08 0x78 0x88 0x70
0xF8 0x80 0x80 0x40 0x40
0x70 0x88 0x70 0x88 0x70
0xF0 0x88 0xF8 0x80 0x80
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00


: boost_gauge_start
0xC0 0xC0 0xC0 0xC0 0xC0 

: boost_gauge_step
0x40 0xC0 0xC0 0xC0 0x40 


: boost_sprite_1
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x1F 0x00 0x7F
0x07 0xF8 0x7F 0xFC 0x7F 0xFF 0x00 0x0F 0x0F 0x0F 0x1F 0xFF 0x1F 0xFF 0x01 0xFF

0x00 0x7F 0x00 0x3F 0x01 0xFF 0x03 0xFF 0x00 0xFF 0x00 0xF3 0x1F 0xE0 0x3F 0xC0
0x07 0xE0 0x00 0xFE 0x00 0x3F 0x00 0x0F 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFC 0x00 0xFF 0x80 0xFF 0xC0
0x03 0xE0 0x01 0xF0 0xF0 0xF0 0xFC 0x78 0xF8 0x38 0xE0 0x1C 0xE0 0x0C 0xE6 0x0C

0xFF 0x0C 0xFF 0x0C 0xFF 0x0C 0xFF 0x0C 0xFE 0x0C 0xFC 0x1C 0x78 0x18 0x60 0x38
0x00 0xF0 0x03 0xF0 0xFF 0xE0 0xFF 0x80 0xFE 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: boost_sprite_2
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x1E 0x1F 0x07 0xFF
0x0F 0xFC 0x1F 0xF1 0x39 0xF7 0x00 0x7F 0x00 0x0F 0x00 0x1F 0x1F 0xFF 0x0F 0xFF

0x00 0x7F 0x00 0x3F 0x00 0x1F 0x03 0xFF 0x0F 0xFF 0x07 0xFF 0x01 0xFF 0x01 0xC7
0x1F 0xF0 0x7F 0xFC 0x60 0x3E 0x00 0x0F 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFC 0x00 0xFF 0x80 0xFF 0xC0
0x03 0xE0 0xE0 0xF0 0xF8 0x30 0xFC 0x38 0xE6 0x18 0xE1 0x1C 0xE3 0x1C 0xE7 0x0C

0xFF 0x8C 0xFF 0x8C 0xFF 0x8C 0xFF 0x8C 0xFF 0x0C 0xFF 0x0C 0xFE 0x18 0xFC 0x18
0x00 0x30 0x00 0x70 0x01 0xE0 0xFF 0x80 0xFE 0x00 0x00 0x00 0x00 0x00 0x00 0x00


: title
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x03 0x00 0x02 0x00 0x00
0x00 0x00 0x00 0x01 0x00 0x07 0x00 0x0F 0x00 0x1F 0x00 0x3F 0x00 0x7F 0x00 0xFC
0x00 0xF8 0x00 0xF0 0x00 0xF0 0x00 0xF0 0x00 0xF8 0x00 0xFC 0x00 0x7C 0x00 0x3E
0x00 0x3F 0x00 0x0F 0x00 0x07 0x00 0x01 0x00 0x00 0x00 0x07 0x00 0x1F 0x00 0x3F
0x00 0x00 0x00 0x00 0x88 0x88 0x44 0x94 0x23 0xA2 0xE4 0xBE 0x28 0xA2 0x00 0x00
0x00 0x00 0xFC 0x00 0xFF 0x0C 0xFF 0xF8 0xFF 0xF8 0xFF 0xFF 0x07 0xFF 0x01 0xFF
0x01 0xFF 0x00 0xFF 0x01 0xFF 0x01 0xFF 0x01 0xFF 0x01 0xFF 0x01 0xFF 0x00 0x3F
0x8F 0xBF 0xFF 0xBF 0xFF 0x3F 0xFC 0x7F 0x01 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0x44 0x43 0x44 0xA4 0x7D 0x14 0x45 0xF4 0x45 0x13 0x00 0x00
0x00 0x00 0x00 0x3E 0x30 0xFF 0x1D 0xFF 0x1F 0xC3 0xFB 0x80 0xFA 0x00 0xFD 0x80
0xFF 0x80 0xFF 0x00 0xFF 0x80 0xFF 0x80 0xFF 0x80 0xFF 0x81 0xFF 0xC7 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFE 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0xC0 0x00 0x40 0x00 0x40 0x00 0x40 0x00 0xC0 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x80 0x00 0xC0 0x00 0xE0 0x00 0xF0 0x00 0x78 0x00 0x7C 0x00
0x3C 0x00 0x3C 0x00 0x3C 0x00 0x7C 0x00 0xFC 0x00 0xFC 0x00 0xF8 0x00 0xF0 0x00
0xF0 0x00 0xC0 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0xE0 0x00 0xF0 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x03 0x00 0x02 0x00 0x00
0x00 0x00 0x00 0x01 0x00 0x07 0x00 0x0F 0x00 0x1F 0x00 0x3F 0x00 0x7F 0x00 0xFC
0x00 0xF8 0x00 0xF0 0x00 0xF0 0x00 0xF0 0x00 0xF8 0x00 0xFC 0x00 0x7C 0x00 0x3E
0x00 0x3F 0x00 0x0F 0x00 0x07 0x00 0x01 0x00 0x00 0x00 0x07 0x00 0x1F 0x00 0x3F
0x00 0x00 0x00 0x00 0x88 0x88 0x44 0x94 0x23 0xA2 0xE4 0xBE 0x28 0xA2 0x00 0x00
0x00 0x00 0xFC 0x00 0xFF 0x0C 0xFF 0xF8 0xFF 0xF8 0xFF 0xFF 0x07 0xFF 0x01 0xFF
0x01 0xFF 0x00 0xFF 0x01 0xFF 0x01 0xFF 0x01 0xF7 0x01 0xFF 0x01 0xFF 0x00 0x3F
0x8F 0xBF 0xFF 0xBF 0xFF 0x3F 0xFC 0x7F 0x01 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0x44 0x43 0x44 0xA4 0x7D 0x14 0x45 0xF4 0x45 0x13 0x00 0x00
0x00 0x00 0x00 0x3E 0x30 0xFF 0x1D 0xFF 0x1F 0xC3 0xFB 0x80 0xFA 0x00 0xFD 0x80
0xFF 0x80 0xFF 0x00 0xFF 0x80 0xFF 0x80 0xEF 0x80 0xFF 0x81 0xFF 0xC7 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFE 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0xC0 0x00 0x40 0x00 0x40 0x00 0x40 0x00 0xC0 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x80 0x00 0xC0 0x00 0xE0 0x00 0xF0 0x00 0x78 0x00 0x7C 0x00
0x3C 0x00 0x3C 0x00 0x3C 0x00 0x7C 0x00 0xFC 0x00 0xFC 0x00 0xF8 0x00 0xF0 0x00
0xF0 0x00 0xC0 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0xE0 0x00 0xF0 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF7 0xFF 0xE3 0xFF 0xF7 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xC7 0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xF7 0xFF 0xF7 0xFF 0xD3 0xFF 0xF3 0xFF 0xF3 0xFF 0xE7 0xFF 0xF7
0xFF 0xFF 0xFF 0xFF 0xFF 0xFB 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xEF 0xFF 0xEF 0xFF 0xC7 0xFF 0xCF 0xFF 0xEB 0xFF 0xCF 0xFF 0xEF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x03 0x00 0x02 0x00 0x00
0x00 0x00 0x00 0x01 0x00 0x07 0x00 0x0F 0x00 0x1F 0x00 0x3F 0x00 0x7F 0x00 0xFC
0x00 0xF8 0x00 0xF0 0x00 0xF0 0x00 0xF0 0x00 0xF8 0x00 0xFC 0x00 0x7C 0x00 0x3E
0x00 0x3F 0x00 0x0F 0x00 0x07 0x00 0x01 0x00 0x00 0x00 0x07 0x00 0x1F 0x00 0x3F
0x00 0x00 0x00 0x00 0x88 0x88 0x44 0x94 0x23 0xA2 0xE4 0xBE 0x28 0xA2 0x00 0x00
0x00 0x00 0xFC 0x00 0xFF 0x0C 0xFF 0xF8 0xFF 0xF8 0xFF 0xFF 0x07 0xF7 0x01 0xF7
0x01 0xF5 0x00 0xB5 0x01 0xA1 0x01 0xC1 0x01 0xE3 0x01 0xA3 0x01 0xE3 0x00 0x23
0x8F 0xA3 0xFF 0xB7 0xFF 0x36 0xFC 0x77 0x01 0xFF 0xFF 0xFF 0xFF 0xFB 0xFF 0xFF
0x00 0x00 0x00 0x00 0x44 0x43 0x44 0xA4 0x7D 0x14 0x45 0xF4 0x45 0x13 0x00 0x00
0x00 0x00 0x00 0x3E 0x30 0xFF 0x1D 0xFF 0x1F 0xC3 0xFB 0x80 0xEA 0x00 0xED 0x80
0xEF 0x80 0xCF 0x00 0xC7 0x80 0xC7 0x80 0xC7 0x80 0x83 0x81 0xC3 0xC7 0xC3 0xFF
0xD7 0xFF 0xD7 0xFF 0xDF 0xFF 0xDF 0xFE 0xCE 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0xC0 0x00 0x40 0x00 0x40 0x00 0x40 0x00 0xC0 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x80 0x00 0xC0 0x00 0xE0 0x00 0xF0 0x00 0x78 0x00 0x7C 0x00
0x3C 0x00 0x3C 0x00 0x3C 0x00 0x7C 0x00 0xFC 0x00 0xFC 0x00 0xF8 0x00 0xF0 0x00
0xF0 0x00 0xC0 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0xE0 0x00 0xF0 0x00
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xF7 0xFF 0xF7 0xFF 0xF7 0xFF 0xB7 0xFD 0xF7 0xFF 0xF7 0xFF 0xF2
0xFF 0xD2 0xFF 0xD3 0xFF 0xC3 0xFF 0xC1 0xFF 0xC0 0xFF 0xC0 0xFF 0xC0 0xFF 0xEB
0xFF 0xEB 0xFF 0xF7 0xFF 0xF3 0xFF 0xFA 0xFF 0xFB 0xFF 0xEB 0xFF 0xFF 0xFF 0xFB
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xDF 0xFF 0xCF 0xFF 0xCF 0xFF
0xEF 0xFF 0xEF 0xFF 0xC3 0xFF 0xCB 0xFF 0x89 0xFF 0x8F 0xFF 0xCE 0xFF 0xCF 0x7F
0xC7 0xFF 0xAF 0xFF 0x97 0xFF 0xFB 0xFF 0xDA 0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xEF 0xFF 0xE7 0xFF 0xE7 0xFF 0xFF
0xFF 0xFF 0xFF 0xF7 0xFF 0xFF 0xFF 0xBF 0xFF 0xEF 0xFF 0xC7 0xFF 0xE7 0xFF 0xF7
0xFF 0xFF 0xFF 0xD3 0xFF 0xFE 0xFF 0xF3 0xFF 0xF3 0xFF 0xF3 0xFF 0xFF 0xFF 0xF3
0xFF 0xF7 0xFF 0xF7 0xFF 0xFF 0xFF 0xCB 0xFF 0x9F 0xFF 0x8E 0xFF 0x9F 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xEF 0xFF 0xFF 0xFF 0xEF 0xFF 0xBF 0xFF 0x8F 0xFF 0xEF 0xFF 0x7F 0xFF
0xEF 0xFF 0xCF 0xFF 0xDF 0xFF 0xCD 0xFF 0xC7 0xFF 0xA7 0xFF 0x8F 0xFF 0xDF 0xFF
0xDF 0xFF 0xCF 0xFF 0xCF 0xFF 0xDF 0xFF 0xFB 0xFF 0xB5 0xFF 0xCF 0xFF 0xEF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF7 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xD7 0xFF 0xFF
0xFF 0xFF 0xFF 0xEF 0xFF 0xFE 0xFF 0xF3 0xFF 0xF3 0xFF 0xFF 0xFF 0xF3 0xFF 0xFB
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF7 0xFF 0xFD 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xEF 0xFF 0x7F 0xFF
0xEF 0xFF 0xCF 0xFF 0xDF 0xFF 0xCD 0xFF 0xCF 0xFF 0xF7 0xFF 0xFF 0xFF 0xDF 0xFF
0xDF 0xFF 0xDF 0xFF 0x9F 0xFF 0xFF 0xFF 0xF7 0xFF 0xFB 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xDF 0xFF 0xFF 0xFF 0xCF 0xFF 0xDF
0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF3 0xFF 0xF3 0xFF 0xFF 0xFF 0xF3 0xFF 0xF3
0xFF 0xFB 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xFD 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0xFF 0xFF 0xFF 0xFF 0xFF
0x7F 0xFF 0xDF 0xFF 0xFF 0xFF 0xCF 0xFF 0xCF 0xFF 0xFF 0xFF 0xFF 0xFF 0xBF 0xFF
0x9F 0xFF 0xDF 0xFF 0x5F 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFB 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xE7
0xFF 0xF7 0xFF 0xFF 0xFF 0xFF 0xFF 0xF3 0xFF 0xF3 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFB 0xFF 0xF7 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF7 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xCF 0xFF 0xCF 0xFF 0xDF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xDF 0xFF 0xDF 0xFF 0xBF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x03 0x00 0x02 0x00 0x00
0x00 0x00 0x00 0x01 0x00 0x07 0x00 0x0F 0x00 0x1F 0x00 0x3F 0x00 0x7F 0x00 0xFC
0x00 0xF8 0x00 0xF0 0x00 0xF0 0x00 0xF0 0x00 0xF8 0x00 0xFC 0x00 0x7C 0x00 0x3E
0x00 0x3F 0x00 0x0F 0x00 0x07 0x00 0x01 0x00 0x00 0x00 0x07 0x00 0x1F 0x00 0x3F
0x00 0x00 0x00 0x00 0x88 0x88 0x44 0x94 0x23 0xA2 0xE4 0xBE 0x28 0xA2 0x00 0x00
0x00 0x00 0xFC 0x00 0xFF 0x0C 0xFF 0xF8 0xFF 0xF8 0xFF 0xFF 0x07 0xFF 0x01 0xFF
0x01 0xF7 0x00 0xFF 0x01 0xFF 0x01 0xF3 0x01 0xF3 0x01 0xFF 0x01 0xFF 0x00 0x3F
0x8F 0xBF 0xFF 0xBF 0xFF 0x3F 0xFC 0x7F 0x01 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0x44 0x43 0x44 0xA4 0x7D 0x14 0x45 0xF4 0x45 0x13 0x00 0x00
0x00 0x00 0x00 0x3E 0x30 0xFF 0x1D 0xFF 0x1F 0xC3 0xFB 0x80 0xFA 0x00 0xFD 0x80
0xFF 0x80 0xFF 0x00 0xFF 0x80 0xCF 0x80 0xCF 0x80 0xFF 0x81 0xFF 0xC7 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xDF 0xFE 0xFE 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0xC0 0x00 0x40 0x00 0x40 0x00 0x40 0x00 0xC0 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x80 0x00 0xC0 0x00 0xE0 0x00 0xF0 0x00 0x78 0x00 0x7C 0x00
0x3C 0x00 0x3C 0x00 0x3C 0x00 0x7C 0x00 0xFC 0x00 0xFC 0x00 0xF8 0x00 0xF0 0x00
0xF0 0x00 0xC0 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0xE0 0x00 0xF0 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x03 0x00 0x02 0x00 0x00
0x00 0x00 0x00 0x01 0x00 0x07 0x00 0x0F 0x00 0x1F 0x00 0x3F 0x00 0x7F 0x00 0xFC
0x00 0xF8 0x00 0xF0 0x00 0xF0 0x00 0xF0 0x00 0xF8 0x00 0xFC 0x00 0x7C 0x00 0x3E
0x00 0x3F 0x00 0x0F 0x00 0x07 0x00 0x01 0x00 0x00 0x00 0x07 0x00 0x1F 0x00 0x3F
0x00 0x00 0x00 0x00 0x88 0x88 0x44 0x94 0x23 0xA2 0xE4 0xBE 0x28 0xA2 0x00 0x00
0x00 0x00 0xFC 0x00 0xFF 0x0C 0xFF 0xF8 0xFF 0xF8 0xFF 0xFF 0x07 0xFF 0x01 0xFF
0x01 0xFF 0x00 0xFF 0x01 0xFF 0x01 0xF3 0x01 0xF3 0x01 0xFF 0x01 0xFF 0x00 0x3F
0x8F 0xBF 0xFF 0xBF 0xFF 0x3F 0xFC 0x7F 0x01 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0x44 0x43 0x44 0xA4 0x7D 0x14 0x45 0xF4 0x45 0x13 0x00 0x00
0x00 0x00 0x00 0x3E 0x30 0xFF 0x1D 0xFF 0x1F 0xC3 0xFB 0x80 0xFA 0x00 0xFD 0x80
0xFF 0x80 0xFF 0x00 0xFF 0x80 0xCF 0x80 0xCF 0x80 0xFF 0x81 0xFF 0xC7 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFE 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0x00 0x00 0x00 0x00 0xC0 0x00 0x40 0x00 0x40 0x00 0x40 0x00 0xC0 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x80 0x00 0xC0 0x00 0xE0 0x00 0xF0 0x00 0x78 0x00 0x7C 0x00
0x3C 0x00 0x3C 0x00 0x3C 0x00 0x7C 0x00 0xFC 0x00 0xFC 0x00 0xF8 0x00 0xF0 0x00
0xF0 0x00 0xC0 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0xE0 0x00 0xF0 0x00

: akahad_gameover_head
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x3C 0x3C 0x7F 0xDE 0x7F 0xE6 0x6D 0x76
0x6F 0xFE 0x77 0xFE 0x3B 0xDC 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

0x00 0x00 0x00 0x00 0x00 0xF0 0x00 0x78 0x03 0x1C 0x07 0xCC 0x1F 0xFC 0x3D 0x78
0x3F 0xF0 0x77 0xE0 0x73 0xC0 0x39 0x80 0x3E 0x00 0x0E 0x00 0x00 0x00 0x00 0x00

0x00 0x00 0x01 0xC0 0x03 0xF0 0x02 0x78 0x01 0x98 0x07 0xD8 0x0F 0xF8 0x1D 0x70
0x1F 0xE0 0x3F 0xE0 0x37 0xC0 0x33 0x00 0x39 0xC0 0x1F 0xC0 0x1F 0x00 0x00 0x00

0x00 0x00 0x03 0xC0 0x0F 0xE0 0x0C 0xE0 0x0B 0xE0 0x07 0xE0 0x0F 0xE0 0x0D 0x60
0x0F 0xE0 0x07 0xE0 0x0F 0xC0 0x0F 0x30 0x0E 0x70 0x0F 0xE0 0x07 0xE0 0x01 0x00

0x00 0x00 0x00 0x00 0x0F 0x00 0x3F 0x80 0x33 0x80 0x77 0xC0 0x6F 0xE0 0x2D 0x60
0x0F 0xE0 0x0F 0xE8 0x0F 0xCC 0x07 0x1C 0x03 0xF8 0x03 0xF0 0x00 0x60 0x00 0x00

0x00 0x00 0x00 0x00 0x1C 0x00 0x3F 0x00 0x3F 0x80 0x67 0xC0 0x6F 0xE0 0x6D 0x64
0x6F 0xE6 0x2F 0xEE 0x07 0xDC 0x01 0xFC 0x01 0xF8 0x00 0x30 0x00 0x00 0x00 0x00

0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


: bal_list
# index x y sub x sub y vel x vel y
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0
-1 0 0 0 0 0 0 0


  
# lol I have... no idea what any of these were supposed to mean
# OH right it's the BCD of how many you need, of course, hahaha

# Seconds, Orbs, BCD ORBS
: levels_table
30  20   0xA   2   0
30  40   0xA   3   0
30  60   0xA   4   0
30 100    1    0   0
30 120    1    2   0
30 140    1    4   0
30 160    1    6   0
30 180    1    8   0
30 200    2    0   0
30 220    2    2   0
30 255    2    5   5



: ecnirp_data
-1 0 0 0 0 0 0 0


:macro ffd X { 
  :byte { X * 8 }
}


: fate_frame_current
0

: fate_frame_sync
ffd 0       -1
ffd 1       -1
ffd 2       -1
ffd 4       -1
ffd 5       -1
ffd 5       -1
ffd 6       -1
ffd 6       -1
ffd 7       -1
ffd 7       -1
ffd 8       -1
ffd 8       -1
ffd 9       -1
ffd 9       -1
ffd 10       -1
ffd 10       -1
ffd 11       -1
ffd 11       -1
ffd 12       -1
ffd 12       -1
ffd 9       -1
ffd 9       -1
ffd 10       -1
ffd 10       -1
ffd 11       -1
ffd 11       -1
ffd 12       -1
ffd 12       -1
ffd 12       -1
ffd 12       -1
ffd 12       -1
ffd 12       -1
ffd 12       -1
ffd 12       -1
ffd 13       -1
ffd 14       -1
ffd 15       ffd 0  1
ffd 15       ffd 1  2
ffd 15       ffd 2  2
ffd 15       ffd 3  2
ffd 15       ffd 4  2
ffd 15       ffd 5  2
ffd 15       ffd 6  2
ffd 15       ffd 7  4
ffd 15       ffd 8  4
ffd 15       ffd 9  6
ffd 15       ffd 10 6
ffd 15       ffd 11 8
ffd 15       ffd 12 6
ffd 15       ffd 13 1
ffd 15       ffd 14 1
ffd 15       ffd 15 1
ffd 15       ffd 16 1
ffd 15       ffd 17 1
ffd 15       ffd 18 1
ffd 15       ffd 19 1
ffd 15       ffd 20 1
ffd 15       ffd 21 1
ffd 15       ffd 22 1
ffd 15       ffd 23 1
ffd 15       ffd 24 1
ffd 15       ffd 25 1
ffd 15       ffd 26 1
ffd 16       ffd 27 1
ffd 17       ffd 28 1
ffd 18       -2
ffd 19       -2
ffd 20       -2
ffd 21       -2
ffd 22       -2
-3




: ecnirp_run
0x00 0x00 0x3C 0x28 0x3C 0x3C 0x3C 0x18 0x00 0x3C 0x28 0x3C 0x3C 0x3C 0x18 0x10
0x00 0x00 0x3C 0x28 0x3C 0x3C 0x3C 0x24 0x00 0x3C 0x28 0x3C 0x3C 0x3C 0x28 0x08


# 23 frames
: akahad_fate
0x00 0x00 0x1E 0x1E 0x3F 0xEF 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x3D 0xFF 0x3F 0xEE
0x07 0xF8 0x3F 0xF8 0x3F 0xF0 0x0F 0xF0 0x77 0xF8 0x0F 0xFC 0x0F 0xFE 0x07 0xEF
0x00 0x38 0x01 0xFC 0x1F 0xEE 0x3F 0xF3 0x37 0x5B 0x33 0xFF 0x3D 0xFE 0x3F 0xEC
0x0F 0xF8 0x3F 0xF8 0x3F 0xF0 0x0F 0xF0 0x07 0xF8 0x43 0xFC 0x09 0xCE 0x05 0xE7
0x00 0x7C 0x01 0xBC 0x0F 0xEE 0x1F 0xE6 0x1F 0x56 0x1B 0xFE 0x19 0xFC 0x0F 0xE8
0x0F 0xF0 0x07 0xF0 0x0F 0xF0 0x1F 0xFC 0x0F 0xFF 0x00 0xFF 0x00 0xE7 0x02 0x70
0x03 0xE0 0x07 0xF8 0x01 0xBC 0x07 0xEC 0x0F 0xEC 0x0F 0x5C 0x1B 0xFC 0x1D 0xFC
0x0E 0xE8 0x07 0x3B 0x07 0xFB 0x03 0xFF 0x03 0xFE 0x00 0xFE 0x00 0xC0 0x00 0x00
0x00 0x00 0x07 0xC0 0x0F 0xF0 0x0D 0xF8 0x1B 0xFE 0x3F 0xFF 0x3E 0xBF 0x3F 0xFF
0x3F 0xFF 0x3D 0xDE 0x1E 0x7E 0x0F 0xFE 0x07 0xFE 0x07 0xF0 0x01 0xC0 0x00 0x00
0x00 0x00 0x00 0x00 0x01 0x80 0x07 0xE0 0x1F 0xF8 0x3F 0xF8 0x3D 0x7C 0x3F 0xFC
0x3F 0xFC 0x3F 0xF8 0x3F 0xF8 0x1F 0xF8 0x0F 0xC0 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x07 0xC0 0x1F 0xE0 0x1F 0xF0 0x3F 0xF8 0x3D 0x78 0x3F 0xFC
0x1F 0xFC 0x1F 0xFC 0x0F 0xF8 0x07 0xF8 0x01 0xF0 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x0F 0xC0 0x1F 0xF0 0x1F 0xF8 0x1F 0xF8 0x1D 0x78 0x1F 0xF8
0x1F 0xF8 0x0F 0xF8 0x0F 0xE0 0x03 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x0F 0xE0 0x1F 0xF0 0x1F 0xF0 0x1D 0x70 0x1F 0xF0
0x0F 0xF0 0x07 0xE0 0x03 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x03 0x80 0x0C 0x60 0x10 0x10 0x10 0x10 0x12 0x90 0x10 0x10
0x10 0x30 0x08 0x40 0x07 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x03 0xE0 0x07 0xF0 0x0F 0xF0 0x1F 0xF0 0x1D 0x70 0x1F 0xF0
0x1F 0xF0 0x0F 0xF0 0x07 0xE0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x07 0xC0 0x08 0x20 0x10 0x10 0x10 0x10 0x12 0x90 0x10 0x10
0x10 0x10 0x08 0x20 0x07 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x07 0xC0 0x0F 0xE0 0x1F 0xF0 0x1F 0xF0 0x1D 0x70 0x1F 0xF0
0x1F 0xF0 0x0F 0xE0 0x07 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x0F 0xE0 0x0F 0xE0 0x0D 0x60 0x0F 0xE0
0x0F 0xE0 0x07 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x0F 0xE0 0x0F 0xE0 0x1D 0x70
0x1F 0xF0 0x1F 0xF0 0x1F 0xF0 0x17 0xF8 0x34 0xAC 0x24 0xA4 0x00 0xA0 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x0F 0xE0 0x0D 0x70
0x0F 0xF0 0x1F 0xF8 0x1F 0xF8 0x3F 0xF8 0x36 0xBC 0x64 0xA6 0x64 0xF2 0x44 0x5B
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x0F 0xE0 0x0D 0x70
0x0F 0xF0 0x0F 0xF8 0x0F 0xF8 0x1F 0xF8 0x12 0xE8 0x32 0xA8 0x32 0xBE 0x26 0xDB
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x0F 0xE0 0x0D 0x70 0x0F 0xF0
0x0F 0xF8 0x0F 0xF8 0x1F 0xF8 0x12 0xE8 0x32 0xA8 0x32 0xA4 0x22 0xD6 0x26 0x5A
0x00 0x00 0x00 0x00 0x03 0x80 0x0F 0xE0 0x0F 0xF0 0x1D 0x70 0x1F 0xF8 0x1F 0xF8
0x1F 0xF8 0x1F 0xF8 0x12 0xE8 0x12 0xA8 0x10 0xB8 0x10 0x94 0x00 0x40 0x00 0x00
0x00 0x00 0x00 0x00 0x03 0x00 0x07 0xC0 0x0F 0xE0 0x0D 0x60 0x1F 0xF0 0x1F 0xF8
0x1F 0xF8 0x1F 0xF8 0x1F 0xF8 0x06 0xB8 0x00 0x98 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x80 0x01 0xC0 0x03 0xE0 0x07 0xF0 0x06 0xB4 0x0F 0xFC 0x0F 0xFC
0x0F 0xFC 0x0F 0xF8 0x0F 0xF0 0x07 0xF0 0x01 0xE0 0x00 0x00 0x00 0x00 0x00 0x00
0x01 0x80 0x03 0xE0 0x01 0xE0 0x01 0xF2 0x03 0xFA 0x03 0x5B 0x07 0xFB 0x0F 0xFF
0x1F 0xFE 0x07 0xFC 0x0F 0xF8 0x3F 0xF8 0x20 0xF0 0x00 0x60 0x00 0x3C 0x00 0x00
0x06 0x00 0x0F 0x84 0x1F 0xF6 0x1B 0xFB 0x1B 0x5B 0x0F 0xFF 0x07 0xFF 0x07 0xFE
0x1F 0xF8 0x1F 0xF8 0x1F 0xFB 0x31 0xFE 0x23 0xFE 0x1F 0xE6 0x0F 0x86 0x00 0x1E



# 29 frames

: ecnirp_fate
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x03 0xC0 0x02 0x80 0x03 0xE0 0x03 0xC0 0x03 0xC0 0x06 0x60 0x08 0x30
0x00 0x00 0x00 0x00 0x00 0x10 0x60 0x20 0x10 0x60 0x1C 0xC0 0x06 0x80 0x03 0xC8
0x2E 0x80 0x87 0xF0 0x0F 0xC0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x82 0x0B 0xC0
0x06 0x80 0x07 0xE0 0x4F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x0E 0x90 0x07 0xE0 0x0F 0xC0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x0B 0xC0
0x06 0x80 0x07 0xE0 0x0F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x0E 0x90 0x07 0xE0 0x0F 0xC0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x0B 0xC0
0x06 0x80 0x07 0xE0 0x0F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x0E 0x90 0x07 0xE0 0x0F 0xC0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x0B 0xC0
0x06 0x80 0x07 0xE0 0x0F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x0E 0x90 0x07 0xE0 0x0F 0xC0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x0E 0x80 0x07 0xF0 0x0F 0xC0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x06 0x80 0x0F 0xE0 0x0F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x60 0x0C 0xC0 0x06 0x80 0x03 0xC0
0x07 0xC0 0x0F 0xE0 0x0F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x30 0x0C 0x68 0x16 0xC0 0x07 0xC0
0x07 0xC0 0x0F 0xE0 0x0F 0xD0 0x0F 0xE0 0x13 0x70 0x16 0x58 0x24 0x48 0x48 0xC4
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x70 0x0F 0xD8 0x1F 0xC8
0x0F 0xE0 0x0F 0xD0 0x0F 0xC0 0x03 0xE0 0x13 0x60 0x16 0x58 0x34 0x48 0x28 0xC8
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0x80 0x0F 0xE0 0x0F 0xF0
0x0F 0xF0 0x0F 0xF0 0x1F 0xF0 0x1F 0xE0 0x1B 0x70 0x1A 0x50 0x0E 0x50 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x07 0xE0 0x07 0xE0
0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x04 0x20 0x04 0x20
0x0C 0x20 0x08 0x20 0x0C 0x20 0x0D 0xA0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x07 0xE0 0x07 0xE0
0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x06 0xE0 0x04 0x60
0x0E 0x60 0x08 0x60 0x0C 0x20 0x0D 0x60 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x07 0xE0 0x07 0xE0
0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x06 0xE0 0x07 0xE0
0x0F 0x60 0x0A 0xA0 0x0F 0xE0 0x0D 0x60 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x07 0xE0 0x07 0xE0
0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x07 0xE0 0x07 0xE0
0x0F 0xE0 0x0E 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0xC0 0x07 0xE0 0x07 0xE0
0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xE0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x03 0xC0 0x0F 0xE0 0x1F 0xF0 0x1F 0xF0
0x1F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x0F 0xF0 0x07 0xF0 0x07 0xE0 0x07 0xE0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0A 0x80 0x0E 0x80
0x1F 0xC0 0x0F 0xD0 0x0D 0xF0 0x0F 0xF0 0x0F 0xF0 0x07 0xF0 0x07 0xE0 0x07 0xE0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x02 0x00 0x0A 0x80 0x0A 0x80 0x0B 0x80 0x0D 0x90 0x07 0xB0 0x07 0xE0 0x07 0xE0
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x05 0x20 0x05 0xA0


: gameover_waterfall
0xFF 0xFF 0xFF 0xFF 0xFF 0xFB 0x55 0xAE 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xBD 0x4A 0xF3 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xEF 0x46 0xB5 0xFB 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xB5 0x4B 0xFF 0xFF
0xCF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x78 0xB3 0xCF
0xDC 0x29 0xF7 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE
0xFF 0xFF 0x9A 0x45 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
0xFF 0xFF 0xFF 0xFE 0x88 0x23 0xF7 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF





: orb_patterns

# 1
1 0x80  0 0   0 0  0 0 
1 0x80  0 0   0 0 0 0
0 0     1 0x80  0 0 0 0 
0 0 1 0x80  0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


# 2
1 6 0 0 
1 15 0 0 
1 27 0 0 
1 30 0 0 
1 27 0 0 
1 15 0 0 
1 5 0 0 
0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 

# 3
1 6 0 0 
1 15 0 0 
1 27 0 0 
1 30 0 0 
0 0  0 0 
0 0  0 0 
0 0  0 0 
0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 

# 4
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 
0 0 1 0 0 0 1 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 

# 5
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 0 0 0 1 0 0 0 0 0 2 0 0 0
0 0 0 0 0 0 0 0 2 0 0 0 0 0 1 0 0 0 0 0 
2 0 0 0 0 0 0 0 0 0 0 0 

# 6
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 0x80 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

# 7
0 0 0 0 0 0 0 0 0 0 1 0x80 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0x80 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

# 8
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 0x80 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 0x80 0 0 0 0 0 0 0 0 0 0 0 0



: orb_decider
0 0 0 0

#:monitor level_scratch_data 128

: FREE_CODE_BYTES
:byte { FREE >> 8 }
:byte { FREE }
:monitor FREE_CODE_BYTES "%2i"

:monitor akahad_stash 8